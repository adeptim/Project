.TH "build/CMakeFiles/4.0.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp" 3 "Version 000" "Matrix" \" -*- nroff -*-
.ad l
.nh
.SH NAME
build/CMakeFiles/4.0.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp
.SH SYNOPSIS
.br
.PP
.SS "Макросы"

.in +1c
.ti -1c
.RI "#define \fB__has_include\fP(x)"
.br
.ti -1c
.RI "#define \fBCOMPILER_ID\fP   ''"
.br
.ti -1c
.RI "#define \fBSTRINGIFY_HELPER\fP(X)"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(X)"
.br
.ti -1c
.RI "#define \fBPLATFORM_ID\fP"
.br
.ti -1c
.RI "#define \fBARCHITECTURE_ID\fP"
.br
.ti -1c
.RI "#define \fBDEC\fP(n)"
.br
.ti -1c
.RI "#define \fBHEX\fP(n)"
.br
.ti -1c
.RI "#define \fBCXX_STD_98\fP   199711L"
.br
.ti -1c
.RI "#define \fBCXX_STD_11\fP   201103L"
.br
.ti -1c
.RI "#define \fBCXX_STD_14\fP   201402L"
.br
.ti -1c
.RI "#define \fBCXX_STD_17\fP   201703L"
.br
.ti -1c
.RI "#define \fBCXX_STD_20\fP   202002L"
.br
.ti -1c
.RI "#define \fBCXX_STD_23\fP   202302L"
.br
.ti -1c
.RI "#define \fBCXX_STD\fP   __cplusplus"
.br
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Переменные"

.in +1c
.ti -1c
.RI "char const  * \fBinfo_compiler\fP = 'INFO' ':' 'compiler[' COMPILER_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_platform\fP = 'INFO' ':' 'platform[' PLATFORM_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_arch\fP = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"
.br
.ti -1c
.RI "const char * \fBinfo_language_standard_default\fP"
.br
.ti -1c
.RI "const char * \fBinfo_language_extensions_default\fP"
.br
.in -1c
.SH "Макросы"
.PP 
.SS "#define __has_include( x)"
\fBМакроопределение:\fP
.nf
0
.PP
.fi

.SS "#define ARCHITECTURE_ID"

.SS "#define COMPILER_ID   ''"

.SS "#define CXX_STD   __cplusplus"

.SS "#define CXX_STD_11   201103L"

.SS "#define CXX_STD_14   201402L"

.SS "#define CXX_STD_17   201703L"

.SS "#define CXX_STD_20   202002L"

.SS "#define CXX_STD_23   202302L"

.SS "#define CXX_STD_98   199711L"

.SS "#define DEC( n)"
\fBМакроопределение:\fP
.nf
  ('0' + (((n) / 10000000)%10)), \\
  ('0' + (((n) / 1000000)%10)),  \\
  ('0' + (((n) / 100000)%10)),   \\
  ('0' + (((n) / 10000)%10)),    \\
  ('0' + (((n) / 1000)%10)),     \\
  ('0' + (((n) / 100)%10)),      \\
  ('0' + (((n) / 10)%10)),       \\
  ('0' +  ((n) % 10))
.PP
.fi

.SS "#define HEX( n)"
\fBМакроопределение:\fP
.nf
  ('0' + ((n)>>28 & 0xF)), \\
  ('0' + ((n)>>24 & 0xF)), \\
  ('0' + ((n)>>20 & 0xF)), \\
  ('0' + ((n)>>16 & 0xF)), \\
  ('0' + ((n)>>12 & 0xF)), \\
  ('0' + ((n)>>8  & 0xF)), \\
  ('0' + ((n)>>4  & 0xF)), \\
  ('0' + ((n)     & 0xF))
.PP
.fi

.SS "#define PLATFORM_ID"

.SS "#define STRINGIFY( X)"
\fBМакроопределение:\fP
.nf
STRINGIFY_HELPER(X)
.PP
.fi

.SS "#define STRINGIFY_HELPER( X)"
\fBМакроопределение:\fP
.nf
#X
.PP
.fi

.SH "Функции"
.PP 
.SS "int main (int argc, char * argv[])"

.SH "Переменные"
.PP 
.SS "char const* info_arch = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"

.SS "char const* info_compiler = 'INFO' ':' 'compiler[' COMPILER_ID ']'"

.SS "const char* info_language_extensions_default"
\fBИнициализатор\fP
.nf
= "INFO" ":" "extensions_default["





  "OFF"

"]"
.PP
.fi

.SS "const char* info_language_standard_default"
\fBИнициализатор\fP
.nf
= "INFO" ":" "standard_default["













  "98"

"]"
.PP
.fi

.SS "char const* info_platform = 'INFO' ':' 'platform[' PLATFORM_ID ']'"

.SH "Автор"
.PP 
Автоматически создано Doxygen для Matrix из исходного текста\&.
